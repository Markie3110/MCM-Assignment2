%% Modelling and Control of Manipulator assignment 2: Manipulator Geometry and Direct kinematic
clc;
clear;
close all;
addpath('include');


%% 1.
% You will need to define all the model matrices, and fill the so called iTj matrices inside BuildTree() function 
% Be careful to define the z-axis coinciding with the joint rotation axis,
% and such that the positive rotation is the same as showed in the CAD model you received.
geom_model = BuildTree();

% Useful initizializations
numberOfLinks = 7;                    % number of manipulator's links.
linkType = [0,0,0,0,0,0,0];         % boolean that specifies two possible link types: Rotational, Prismatic.
bri= zeros(3,numberOfLinks);        % Basic vector of i-th link w.r.t. base
bTi = zeros(4,4,numberOfLinks);     % Trasformation matrix i-th link w.r.t. base

iTj = zeros(4,4,1); %è¬Ž
% Initial joint configuration 
q = [0,0,0,0,0,0,0];

% Q1.1 and Q1.2
biTei = GetDirectGeometry(q, geom_model, linkType);
disp(biTei);

q = [0,0,0,0,0,pi/2,0];
biTei = GetDirectGeometry(q, geom_model, linkType);
disp(biTei);

q = [0,pi/2,0,-pi/2,0,0,0];
biTei = GetDirectGeometry(q, geom_model, linkType);
disp(biTei);

q = [pi/4,pi/2,-pi/8,-pi/2,pi/4,2*pi/3,0];
biTei = GetDirectGeometry(q, geom_model, linkType);
disp(biTei);

%{
%Q1.3
for i =1:numberOfLinks
    bTi(:,:,i)= GetTransformationWrtBase(biTei,i);
end

for i= 1:numberOfLinks-1
    for j = i+1:numberOfLinks
        iTj(:,:,i) = GetFrameWrtFrame(i,j,biTei);
    end
end

for i = 1:numberOfLinks
    bri(:,i) = GetBasicVectorWrtBase(bTi(:,:,i));
end
%}

% Q1.4
% Hint: use plot3() and line() matlab functions. 
qi = [0, 0, 0, 0, 0, 0, 0];
qf = [pi/4,pi/2,-pi/8,-pi/2,pi/4,2*pi/3,0];
numberOfSteps = 100;
r = zeros(3, numberOfSteps,numberOfLinks);

for i = 1:numberOfSteps
%-------------------MOVE----------------------%
    q = (qf-qi)*i/numberOfSteps;
    biTei = GetDirectGeometry(q, geom_model, linkType);
    for j =1:numberOfLinks
        r(:,i,j) = GetBasicVectorWrtBase(biTei,j);
    end
end
plot3(r(1,:,1),r(2,:,1),r(3,:,1),r(1,:,2),r(2,:,2),r(3,:,2),r(1,:,3),r(2,:,3),r(3,:,3),r(1,:,4),r(2,:,4),r(3,:,4),r(1,:,5),r(2,:,5),r(3,:,5),r(1,:,6),r(2,:,6),r(3,:,6),r(1,:,7),r(2,:,7),r(3,:,7));


qi = [0, pi/2, 0, -pi/2, 0, 0, 0];
qf = [0, 0, 0, 0, 0, 0, 0];

for i = 1:numberOfSteps
%-------------------MOVE----------------------%
    q = (qf-qi)*i/numberOfSteps;
    biTei = GetDirectGeometry(q, geom_model, linkType);
    for j =1:numberOfLinks
        r(:,i,j) = GetBasicVectorWrtBase(biTei,j);
    end
end
plot3(r(1,:,1),r(2,:,1),r(3,:,1),r(1,:,2),r(2,:,2),r(3,:,2),r(1,:,3),r(2,:,3),r(3,:,3),r(1,:,4),r(2,:,4),r(3,:,4),r(1,:,5),r(2,:,5),r(3,:,5),r(1,:,6),r(2,:,6),r(3,:,6),r(1,:,7),r(2,:,7),r(3,:,7));
